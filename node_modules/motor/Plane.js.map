{"version":3,"sources":["src/Plane.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;iCASoB,qBAAqB;;;;yBAEpB,YAAY;;;;;;;;;;;;;;;IAYpB,KAAK;YAAL,KAAK;;;;;;;;;;;;AAWH,WAXF,KAAK,CAWF,cAAc,EAAE;0BAXnB,KAAK;;AAYV,+BAZK,KAAK,6CAYJ,cAAc,EAAE;;AAEtB,QAAI,CAAC,OAAO,GAAG,mCAAY,IAAI,CAAC,OAAO,CAAC,CAAC;AACzC,QAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACvB,QAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;GAC3C;;;;;;;eAjBQ,KAAK;;WAuBJ,sBAAG;AACT,UAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;AACrD,aAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KAC5D;;;;;;;;WAMS,sBAAG;AACT,UAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;AACrD,aAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KAC5D;;;SAnCQ,KAAK;;;;qBAqCH,KAAK","file":"Plane.js","sourcesContent":["/*\n * LICENSE\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n */\n\nimport Surface from 'famous/core/Surface';\n\nimport Molecule from './Molecule';\n\n/**\n * Planes have the properties of [Molecules](#Molecule), plus they contain a\n * [famous/core/Surface](#famous/core/Surface) so that they ultimately render\n * onto the screen. A Surface's events are automatically piped to it's\n * [famous/core/EventHandler](#famous/core/EventHandler), inherited from\n * `Molecule`.\n *\n * @class Plane\n * @extends Molecule\n */\nexport class Plane extends Molecule {\n\n    /**\n     * Creates a new `Plane`. Properties from the `initialOptions` parameter\n     * are applied to this Plane's [famous/core/Surface](#famous/core/Surface) as well as to\n     * to this Plane's [famous/core/Modifier](#famous/core/Modifier), hence the API of a Plane\n     * is currently the combination of the Famo.us `Modifier` and `Surface` APIs.\n     *\n     * @constructor\n     * @param {Object} initialOptions Options for the new Plane.\n     */\n    constructor(initialOptions) {\n        super(initialOptions);\n\n        this.surface = new Surface(this.options);\n        this.add(this.surface);\n        this.surface.pipe(this.options.handler);\n    }\n\n    /**\n     * Get the content of this Plane's [famous/core/Surface](#famous/core/Surface).\n     * See [famous/core/Surface.getContent](#famous/core/Surface.getContent).\n     */\n    getContent() {\n        var args = Array.prototype.splice.call(arguments, 0);\n        return this.surface.getContent.apply(this.surface, args);\n    }\n\n    /**\n     * Set the content of this Plane's [famous/core/Surface](#famous/core/Surface).\n     * See [famous/core/Surface.setContent](#famous/core/Surface.setContent).\n     */\n    setContent() {\n        var args = Array.prototype.splice.call(arguments, 0);\n        return this.surface.setContent.apply(this.surface, args);\n    }\n}\nexport default Plane;\n"]}