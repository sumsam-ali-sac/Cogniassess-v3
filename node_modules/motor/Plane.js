/*
 * LICENSE
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _famousCoreSurface = require('famous/core/Surface');

var _famousCoreSurface2 = _interopRequireDefault(_famousCoreSurface);

var _Molecule2 = require('./Molecule');

var _Molecule3 = _interopRequireDefault(_Molecule2);

/**
 * Planes have the properties of [Molecules](#Molecule), plus they contain a
 * [famous/core/Surface](#famous/core/Surface) so that they ultimately render
 * onto the screen. A Surface's events are automatically piped to it's
 * [famous/core/EventHandler](#famous/core/EventHandler), inherited from
 * `Molecule`.
 *
 * @class Plane
 * @extends Molecule
 */

var Plane = (function (_Molecule) {
  _inherits(Plane, _Molecule);

  /**
   * Creates a new `Plane`. Properties from the `initialOptions` parameter
   * are applied to this Plane's [famous/core/Surface](#famous/core/Surface) as well as to
   * to this Plane's [famous/core/Modifier](#famous/core/Modifier), hence the API of a Plane
   * is currently the combination of the Famo.us `Modifier` and `Surface` APIs.
   *
   * @constructor
   * @param {Object} initialOptions Options for the new Plane.
   */

  function Plane(initialOptions) {
    _classCallCheck(this, Plane);

    _get(Object.getPrototypeOf(Plane.prototype), 'constructor', this).call(this, initialOptions);

    this.surface = new _famousCoreSurface2['default'](this.options);
    this.add(this.surface);
    this.surface.pipe(this.options.handler);
  }

  /**
   * Get the content of this Plane's [famous/core/Surface](#famous/core/Surface).
   * See [famous/core/Surface.getContent](#famous/core/Surface.getContent).
   */

  _createClass(Plane, [{
    key: 'getContent',
    value: function getContent() {
      var args = Array.prototype.splice.call(arguments, 0);
      return this.surface.getContent.apply(this.surface, args);
    }

    /**
     * Set the content of this Plane's [famous/core/Surface](#famous/core/Surface).
     * See [famous/core/Surface.setContent](#famous/core/Surface.setContent).
     */
  }, {
    key: 'setContent',
    value: function setContent() {
      var args = Array.prototype.splice.call(arguments, 0);
      return this.surface.setContent.apply(this.surface, args);
    }
  }]);

  return Plane;
})(_Molecule3['default']);

exports.Plane = Plane;
exports['default'] = Plane;
//# sourceMappingURL=Plane.js.map