{"version":3,"sources":["src/Grid.js"],"names":[],"mappings":"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","file":"Grid.js","sourcesContent":["/*\n * LICENSE\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n */\n\nimport Modifier from 'famous/core/Modifier';\nimport Transform from 'famous/core/Transform';\n\nimport Molecule from './Molecule';\n\nimport forLength from 'army-knife/forLength';\n\n/**\n * A scenegraph tree with a variable number of leaf node Modifiers (the grid\n * cells) that are arranged in a grid. Add any [famous/core/RenderNode](#famous/core/RenderNode)-compatible\n * item to each leafnode of the grid.\n *\n * TODO: Use Molecule instead of Modifier for the grid cells.\n * TODO: Add an options parameter, that the Molecule constructor will handle.\n *\n * @class Grid\n * @extends Molecule\n */\nexport class Grid extends Molecule {\n\n    /**\n     * Creates a new Grid having the specified number of columns, number of rows,\n     * and famo.us-style size.\n     *\n     * @constructor\n     * @param {Number} columns The integer number of columns.\n     * @param {Number} rows The integer number of rows.\n     * @param {Array} size A famo.us-style width/height size array.\n     */\n    constructor(columns, rows, size) {\n        super({size: size});\n\n        this.columns = columns;\n        this.rows = rows;\n        this.cellNodes = [];\n\n        if (typeof this.options.size === 'undefined') { this.setOptions({size: [undefined, undefined]}); }\n\n        forLength(this.columns*this.rows, this._createGridCell.bind(this));\n    }\n\n    /**\n     * Creates a grid cell at the given index.\n     *\n     * @private\n     * @param {Number} index The integer index of the grid cell.\n     */\n    _createGridCell(index) {\n        var column = index % this.columns;\n        var row = Math.floor(index / this.columns);\n\n        var cellSize = null;\n        if (typeof this.options.size[0] != 'undefined' && typeof this.options.size[1] != 'undefined') {\n            cellSize = [];\n            cellSize[0] = this.options.size[0]/this.columns;\n            cellSize[1] = this.options.size[1]/this.rows;\n        }\n\n        var mod = new Modifier({\n            align: [0,0],\n            origin: [0,0],\n            size: cellSize? [cellSize[0], cellSize[1]]: [undefined, undefined],\n            transform: Transform.translate(column*cellSize[0],row*cellSize[1],0)\n        });\n        var mod2 = new Modifier({\n            //transform: Transform.rotateY(Math.PI/10),\n            align: [0.5,0.5],\n            origin: [0.5,0.5]\n        });\n        // FIXME: ^^^ Why do I need an extra Modifier to align stuff in the middle of the grid cells?????\n        this.cellNodes.push(this.add(mod).add(mod2));\n    }\n\n    /**\n     * Sets the items to be layed out in the grid.\n     *\n     * @param {Array} children An array of [famous/core/RenderNode](#famous/core/RenderNode)-compatible items.\n     */\n    setChildren(children) {\n        forLength(this.columns*this.rows, function(index) {\n            //this.cellNodes[index].set(null); // TODO: how do we erase previous children?\n            this.cellNodes[index].add(children[index]);\n        }.bind(this));\n        return this;\n    }\n}\nexport default Grid;\n"]}