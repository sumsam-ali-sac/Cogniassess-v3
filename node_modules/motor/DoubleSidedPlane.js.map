{"version":3,"sources":["src/DoubleSidedPlane.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;mCASsB,uBAAuB;;;;yBAExB,YAAY;;;;qBACf,SAAS;;;;;;;;;;;;;;IAWd,gBAAgB;YAAhB,gBAAgB;;;;;;;;;;;AAUd,WAVF,gBAAgB,CAUb,cAAc,EAAE;0BAVnB,gBAAgB;;AAWrB,+BAXK,gBAAgB,6CAWf,cAAc,EAAE;;AAEtB,QAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACnB,QAAI,CAAC,MAAM,GAAG,uBAAU,IAAI,CAAC,OAAO,CAAC,CAAC;AACtC,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,iCAAU,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC;AACnD,QAAI,CAAC,UAAU,CAAC,EAAC,UAAU,EAAE,EAAC,UAAU,EAAE,QAAQ,EAAC,EAAC,CAAC,CAAC;AACtD,QAAI,CAAC,MAAM,GAAG,uBAAU,IAAI,CAAC,OAAO,CAAC,CAAC;AACtC,QAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,iCAAU,MAAM,CAAC,CAAC,EAAC,IAAI,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,CAAC;;AAEzD,QAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAChC,QAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAChC,QAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AACrB,QAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACtB,QAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACvC,QAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;GAE1C;;;;;;;;;eA3BQ,gBAAgB;;WAmCf,sBAAG;AACT,aAAO,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC;KAC/D;;;;;;;;;;WAQS,oBAAC,OAAO,EAAE;AAChB,UAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,UAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;KACtC;;;SAhDQ,gBAAgB;;;;qBAkDd,gBAAgB","file":"DoubleSidedPlane.js","sourcesContent":["/*\n * LICENSE\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n */\n\nimport Transform from 'famous/core/Transform';\n\nimport Molecule from './Molecule';\nimport Plane from './Plane';\n\n/**\n * A scenegraph tree who's two leaf nodes are [Plane](#Plane) instances facing\n * opposite directions. For the purposes of these docs, in a brand new app with\n * only a single `DoubleSidedPlane` added to the context, and having no\n * rotation, \"plane1\" faces you and \"plane2\" faces away.\n *\n * @class DoubleSidedPlane\n * @extends Molecule\n */\nexport class DoubleSidedPlane extends Molecule {\n\n    /**\n     * Creates a new `DoubleSidedPlane` who's `initialOptions` get passed to\n     * both [Plane](#Plane) instances, as well as this DoubleSidedPlane's parent\n     * [Molecule](#Molecule) constructor.\n     *\n     * @constructor\n     * @param {Object} initialOptions The options to initiate the `DoubleSidedPlane` with.\n     */\n    constructor(initialOptions) {\n        super(initialOptions);\n\n        this.children = [];\n        this.plane1 = new Plane(this.options);\n        this.plane1.transform.set(Transform.rotate(0,0,0));\n        this.setOptions({properties: {background: 'orange'}});\n        this.plane2 = new Plane(this.options);\n        this.plane2.transform.set(Transform.rotate(0,Math.PI,0));\n\n        this.children.push(this.plane1);\n        this.children.push(this.plane2);\n        this.add(this.plane2)\n        this.add(this.plane1);\n        this.plane1.pipe(this.options.handler);\n        this.plane2.pipe(this.options.handler);\n\n    }\n\n    /**\n     * Get the content of the [famous/core/Surface](#famous/core/Surface) of each [Plane](#Plane).\n     *\n     * @returns {Array} An array containing two items, the content of each\n     * `Plane`. The first item is from \"plane1\".\n     */\n    getContent() {\n        return [this.plane1.getContent(), this.plane2.getContent()];\n    }\n\n    /**\n     * Set the content of both [Plane](#Plane) instances.\n     *\n     * @param {Array} content An array of content, one item per `Plane`. The\n     * first item is for \"plane1\".\n     */\n    setContent(content) {\n        this.plane1.setContent(content[0]);\n        this.plane2.setContent(content[1]);\n    }\n}\nexport default DoubleSidedPlane;\n"]}