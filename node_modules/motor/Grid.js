/*
 * LICENSE
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _famousCoreModifier = require('famous/core/Modifier');

var _famousCoreModifier2 = _interopRequireDefault(_famousCoreModifier);

var _famousCoreTransform = require('famous/core/Transform');

var _famousCoreTransform2 = _interopRequireDefault(_famousCoreTransform);

var _Molecule2 = require('./Molecule');

var _Molecule3 = _interopRequireDefault(_Molecule2);

var _armyKnifeForLength = require('army-knife/forLength');

var _armyKnifeForLength2 = _interopRequireDefault(_armyKnifeForLength);

/**
 * A scenegraph tree with a variable number of leaf node Modifiers (the grid
 * cells) that are arranged in a grid. Add any [famous/core/RenderNode](#famous/core/RenderNode)-compatible
 * item to each leafnode of the grid.
 *
 * TODO: Use Molecule instead of Modifier for the grid cells.
 * TODO: Add an options parameter, that the Molecule constructor will handle.
 *
 * @class Grid
 * @extends Molecule
 */

var Grid = (function (_Molecule) {
    _inherits(Grid, _Molecule);

    /**
     * Creates a new Grid having the specified number of columns, number of rows,
     * and famo.us-style size.
     *
     * @constructor
     * @param {Number} columns The integer number of columns.
     * @param {Number} rows The integer number of rows.
     * @param {Array} size A famo.us-style width/height size array.
     */

    function Grid(columns, rows, size) {
        _classCallCheck(this, Grid);

        _get(Object.getPrototypeOf(Grid.prototype), 'constructor', this).call(this, { size: size });

        this.columns = columns;
        this.rows = rows;
        this.cellNodes = [];

        if (typeof this.options.size === 'undefined') {
            this.setOptions({ size: [undefined, undefined] });
        }

        (0, _armyKnifeForLength2['default'])(this.columns * this.rows, this._createGridCell.bind(this));
    }

    /**
     * Creates a grid cell at the given index.
     *
     * @private
     * @param {Number} index The integer index of the grid cell.
     */

    _createClass(Grid, [{
        key: '_createGridCell',
        value: function _createGridCell(index) {
            var column = index % this.columns;
            var row = Math.floor(index / this.columns);

            var cellSize = null;
            if (typeof this.options.size[0] != 'undefined' && typeof this.options.size[1] != 'undefined') {
                cellSize = [];
                cellSize[0] = this.options.size[0] / this.columns;
                cellSize[1] = this.options.size[1] / this.rows;
            }

            var mod = new _famousCoreModifier2['default']({
                align: [0, 0],
                origin: [0, 0],
                size: cellSize ? [cellSize[0], cellSize[1]] : [undefined, undefined],
                transform: _famousCoreTransform2['default'].translate(column * cellSize[0], row * cellSize[1], 0)
            });
            var mod2 = new _famousCoreModifier2['default']({
                //transform: Transform.rotateY(Math.PI/10),
                align: [0.5, 0.5],
                origin: [0.5, 0.5]
            });
            // FIXME: ^^^ Why do I need an extra Modifier to align stuff in the middle of the grid cells?????
            this.cellNodes.push(this.add(mod).add(mod2));
        }

        /**
         * Sets the items to be layed out in the grid.
         *
         * @param {Array} children An array of [famous/core/RenderNode](#famous/core/RenderNode)-compatible items.
         */
    }, {
        key: 'setChildren',
        value: function setChildren(children) {
            (0, _armyKnifeForLength2['default'])(this.columns * this.rows, (function (index) {
                //this.cellNodes[index].set(null); // TODO: how do we erase previous children?
                this.cellNodes[index].add(children[index]);
            }).bind(this));
            return this;
        }
    }]);

    return Grid;
})(_Molecule3['default']);

exports.Grid = Grid;
exports['default'] = Grid;
//# sourceMappingURL=Grid.js.map