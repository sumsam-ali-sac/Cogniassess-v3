/*
 * LICENSE
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _famousCoreTransform = require('famous/core/Transform');

var _famousCoreTransform2 = _interopRequireDefault(_famousCoreTransform);

var _famousInputsMouseSync = require('famous/inputs/MouseSync');

var _famousInputsMouseSync2 = _interopRequireDefault(_famousInputsMouseSync);

var _famousInputsTouchSync = require('famous/inputs/TouchSync');

var _famousInputsTouchSync2 = _interopRequireDefault(_famousInputsTouchSync);

var _famousInputsGenericSync = require('famous/inputs/GenericSync');

var _famousInputsGenericSync2 = _interopRequireDefault(_famousInputsGenericSync);

var _Molecule2 = require('./Molecule');

var _Molecule3 = _interopRequireDefault(_Molecule2);

var _Plane = require('./Plane');

var _Plane2 = _interopRequireDefault(_Plane);

var _armyKnifeForLength = require('army-knife/forLength');

var _armyKnifeForLength2 = _interopRequireDefault(_armyKnifeForLength);

/**
 * A scenegraph tree that lays things out in a cube form. The leaf nodes of the
 * scenegraph (the cube sides) are Molecules. Add anything to the leaf nodes
 * that a [famous/core/RenderNode](#famous/core/RenderNode) would normally accept.
 *
 * @class Cube
 * @extends Molecule
 */

var Cube = (function (_Molecule) {
    _inherits(Cube, _Molecule);

    /**
     * Create a new Cube.
     *
     * @constructor
     * @param {Number} cubeWidth The integer width of the cube.
     */

    function Cube(cubeWidth) {
        _classCallCheck(this, Cube);

        _get(Object.getPrototypeOf(Cube.prototype), 'constructor', this).call(this, { size: cubeWidth });

        _famousInputsGenericSync2['default'].register({
            mouse: _famousInputsMouseSync2['default'],
            touch: _famousInputsTouchSync2['default']
        });

        this.cubeWidth = cubeWidth;

        this.cubeSideNodes = [];
        this.cubeSides = [];

        // TODO: v0.1.0: Put this in a function.
        (0, _armyKnifeForLength2['default'])(6, this._createCubeSide.bind(this));
    }

    /**
     * Creates the 6 sides of the cube (the leafnodes of the scenegraph).
     *
     * TODO v0.1.0: Rename to CubeLayout.
     * TODO v0.1.0: Don't create Planes for each side, let the user specify their own content for each side using this.setChildren.
     *
     * @private
     * @param {Number} index The index (a integer between 0 and 5) that specifies which side to create.
     */

    _createClass(Cube, [{
        key: '_createCubeSide',
        value: function _createCubeSide(index) {
            var T = _famousCoreTransform2['default'];
            var sideMol = new _Molecule3['default']();
            var side = new _Plane2['default']({
                size: [this.cubeWidth, this.cubeWidth],
                properties: {
                    background: 'pink',
                    backfaceVisibility: 'visible'
                }
            });
            var sync = new _famousInputsGenericSync2['default'](['mouse', 'touch']);

            this.cubeSides.push(side);

            side.pipe(sync);
            sync.pipe(this.options.handler);

            // rotate and place each side.
            if (index < 4) {
                // sides
                sideMol.modifier.transformFrom(T.multiply(T.rotate(0, Math.PI / 2 * index, 0), T.translate(0, 0, this.cubeWidth / 2)));
            } else {
                // top/bottom
                sideMol.modifier.transformFrom(T.multiply(T.rotate(Math.PI / 2 * (index % 2 ? -1 : 1), 0, 0), T.translate(0, 0, this.cubeWidth / 2)));
            }

            this.cubeSideNodes.push(this.add(sideMol));
            sideMol.add(side);
        }

        /**
         * Set the content for the sides of the cube.
         *
         * @param {Array} children An array containing anything that a
         * [famous/core/RenderNode](#famous/core/RenderNode) would accept in it's `add` method. Only the
         * first 6 items are used, the rest are ignored.
         */
    }, {
        key: 'setChildren',
        value: function setChildren(children) {
            (0, _armyKnifeForLength2['default'])(6, (function (index) {
                //this.cubeSideNodes[index].set(null); // TODO: how do we erase previous children?
                this.cubeSideNodes[index].add(children[index]);
            }).bind(this));
            return this;
        }
    }]);

    return Cube;
})(_Molecule3['default']);

exports.Cube = Cube;
exports['default'] = Cube;
//# sourceMappingURL=Cube.js.map