/*
 * LICENSE
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _famousCoreTransform = require('famous/core/Transform');

var _famousCoreTransform2 = _interopRequireDefault(_famousCoreTransform);

var _Molecule2 = require('./Molecule');

var _Molecule3 = _interopRequireDefault(_Molecule2);

var _Plane = require('./Plane');

var _Plane2 = _interopRequireDefault(_Plane);

/**
 * A scenegraph tree who's two leaf nodes are [Plane](#Plane) instances facing
 * opposite directions. For the purposes of these docs, in a brand new app with
 * only a single `DoubleSidedPlane` added to the context, and having no
 * rotation, "plane1" faces you and "plane2" faces away.
 *
 * @class DoubleSidedPlane
 * @extends Molecule
 */

var DoubleSidedPlane = (function (_Molecule) {
  _inherits(DoubleSidedPlane, _Molecule);

  /**
   * Creates a new `DoubleSidedPlane` who's `initialOptions` get passed to
   * both [Plane](#Plane) instances, as well as this DoubleSidedPlane's parent
   * [Molecule](#Molecule) constructor.
   *
   * @constructor
   * @param {Object} initialOptions The options to initiate the `DoubleSidedPlane` with.
   */

  function DoubleSidedPlane(initialOptions) {
    _classCallCheck(this, DoubleSidedPlane);

    _get(Object.getPrototypeOf(DoubleSidedPlane.prototype), 'constructor', this).call(this, initialOptions);

    this.children = [];
    this.plane1 = new _Plane2['default'](this.options);
    this.plane1.transform.set(_famousCoreTransform2['default'].rotate(0, 0, 0));
    this.setOptions({ properties: { background: 'orange' } });
    this.plane2 = new _Plane2['default'](this.options);
    this.plane2.transform.set(_famousCoreTransform2['default'].rotate(0, Math.PI, 0));

    this.children.push(this.plane1);
    this.children.push(this.plane2);
    this.add(this.plane2);
    this.add(this.plane1);
    this.plane1.pipe(this.options.handler);
    this.plane2.pipe(this.options.handler);
  }

  /**
   * Get the content of the [famous/core/Surface](#famous/core/Surface) of each [Plane](#Plane).
   *
   * @returns {Array} An array containing two items, the content of each
   * `Plane`. The first item is from "plane1".
   */

  _createClass(DoubleSidedPlane, [{
    key: 'getContent',
    value: function getContent() {
      return [this.plane1.getContent(), this.plane2.getContent()];
    }

    /**
     * Set the content of both [Plane](#Plane) instances.
     *
     * @param {Array} content An array of content, one item per `Plane`. The
     * first item is for "plane1".
     */
  }, {
    key: 'setContent',
    value: function setContent(content) {
      this.plane1.setContent(content[0]);
      this.plane2.setContent(content[1]);
    }
  }]);

  return DoubleSidedPlane;
})(_Molecule3['default']);

exports.DoubleSidedPlane = DoubleSidedPlane;
exports['default'] = DoubleSidedPlane;
//# sourceMappingURL=DoubleSidedPlane.js.map