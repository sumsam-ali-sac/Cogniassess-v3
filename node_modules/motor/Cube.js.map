{"version":3,"sources":["src/Cube.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;mCASsB,uBAAuB;;;;qCACvB,yBAAyB;;;;qCACzB,yBAAyB;;;;uCACvB,2BAA2B;;;;yBAE9B,YAAY;;;;qBACf,SAAS;;;;kCAEL,sBAAsB;;;;;;;;;;;;;IAU/B,IAAI;cAAJ,IAAI;;;;;;;;;AAQF,aARF,IAAI,CAQD,SAAS,EAAE;8BARd,IAAI;;AAST,mCATK,IAAI,6CASH,EAAC,IAAI,EAAE,SAAS,EAAC,EAAE;;AAEzB,6CAAY,QAAQ,CAAC;AACjB,iBAAK,oCAAW;AAChB,iBAAK,oCAAW;SACnB,CAAC,CAAC;;AAEH,YAAI,CAAC,SAAS,GAAG,SAAS,CAAC;;AAE3B,YAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AACxB,YAAI,CAAC,SAAS,GAAG,EAAE,CAAC;;;AAGpB,6CAAU,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KACjD;;;;;;;;;;;;iBAvBQ,IAAI;;eAkCE,yBAAC,KAAK,EAAE;AACnB,gBAAI,CAAC,mCAAY,CAAC;AAClB,gBAAI,OAAO,GAAG,2BAAc,CAAC;AAC7B,gBAAI,IAAI,GAAG,uBAAU;AACjB,oBAAI,EAAE,CAAC,IAAI,CAAC,SAAS,EAAC,IAAI,CAAC,SAAS,CAAC;AACrC,0BAAU,EAAE;AACR,8BAAU,EAAE,MAAM;AAClB,sCAAkB,EAAE,SAAS;iBAChC;aACJ,CAAC,CAAC;AACH,gBAAI,IAAI,GAAG,yCAAgB,CAAC,OAAO,EAAC,OAAO,CAAC,CAAC,CAAC;;AAE9C,gBAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAE1B,gBAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,gBAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;;;AAGhC,gBAAI,KAAK,GAAG,CAAC,EAAE;;AACX,uBAAO,CAAC,QAAQ,CAAC,aAAa,CAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,AAAC,IAAI,CAAC,EAAE,GAAC,CAAC,GAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACrH,MACI;;AACD,uBAAO,CAAC,QAAQ,CAAC,aAAa,CAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAE,AAAC,IAAI,CAAC,EAAE,GAAC,CAAC,IAAG,KAAK,GAAC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,CAAA,AAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,SAAS,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAC/H;;AAED,gBAAI,CAAC,aAAa,CAAC,IAAI,CACnB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CACpB,CAAC;AACF,mBAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SACrB;;;;;;;;;;;eASU,qBAAC,QAAQ,EAAE;AAClB,iDAAU,CAAC,EAAE,CAAA,UAAS,KAAK,EAAE;;AAEzB,oBAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;aAClD,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACd,mBAAO,IAAI,CAAC;SACf;;;WA9EQ,IAAI;;;;qBAgFF,IAAI","file":"Cube.js","sourcesContent":["/*\n * LICENSE\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n */\n\nimport Transform from 'famous/core/Transform';\nimport MouseSync from 'famous/inputs/MouseSync';\nimport TouchSync from 'famous/inputs/TouchSync';\nimport GenericSync from 'famous/inputs/GenericSync';\n\nimport Molecule from './Molecule';\nimport Plane from './Plane';\n\nimport forLength from 'army-knife/forLength';\n\n/**\n * A scenegraph tree that lays things out in a cube form. The leaf nodes of the\n * scenegraph (the cube sides) are Molecules. Add anything to the leaf nodes\n * that a [famous/core/RenderNode](#famous/core/RenderNode) would normally accept.\n *\n * @class Cube\n * @extends Molecule\n */\nexport class Cube extends Molecule {\n\n    /**\n     * Create a new Cube.\n     *\n     * @constructor\n     * @param {Number} cubeWidth The integer width of the cube.\n     */\n    constructor(cubeWidth) {\n        super({size: cubeWidth});\n\n        GenericSync.register({\n            mouse: MouseSync,\n            touch: TouchSync\n        });\n\n        this.cubeWidth = cubeWidth;\n\n        this.cubeSideNodes = [];\n        this.cubeSides = [];\n\n        // TODO: v0.1.0: Put this in a function.\n        forLength(6, this._createCubeSide.bind(this));\n    }\n\n    /**\n     * Creates the 6 sides of the cube (the leafnodes of the scenegraph).\n     *\n     * TODO v0.1.0: Rename to CubeLayout.\n     * TODO v0.1.0: Don't create Planes for each side, let the user specify their own content for each side using this.setChildren.\n     *\n     * @private\n     * @param {Number} index The index (a integer between 0 and 5) that specifies which side to create.\n     */\n    _createCubeSide(index) {\n        var T = Transform;\n        var sideMol = new Molecule();\n        var side = new Plane({\n            size: [this.cubeWidth,this.cubeWidth],\n            properties: {\n                background: 'pink',\n                backfaceVisibility: 'visible'\n            }\n        });\n        var sync = new GenericSync(['mouse','touch']);\n\n        this.cubeSides.push(side);\n\n        side.pipe(sync);\n        sync.pipe(this.options.handler);\n\n        // rotate and place each side.\n        if (index < 4) { // sides\n            sideMol.modifier.transformFrom( T.multiply(T.rotate(0, (Math.PI/2)*index, 0), T.translate(0,0,this.cubeWidth/2)));\n        }\n        else { // top/bottom\n            sideMol.modifier.transformFrom( T.multiply(T.rotate( (Math.PI/2)*(index%2?-1:1), 0, 0), T.translate(0,0,this.cubeWidth/2)));\n        }\n\n        this.cubeSideNodes.push(\n            this.add(sideMol)\n        );\n        sideMol.add(side);\n    }\n\n    /**\n     * Set the content for the sides of the cube.\n     *\n     * @param {Array} children An array containing anything that a\n     * [famous/core/RenderNode](#famous/core/RenderNode) would accept in it's `add` method. Only the\n     * first 6 items are used, the rest are ignored.\n     */\n    setChildren(children) {\n        forLength(6, function(index) {\n            //this.cubeSideNodes[index].set(null); // TODO: how do we erase previous children?\n            this.cubeSideNodes[index].add(children[index]);\n        }.bind(this));\n        return this;\n    }\n}\nexport default Cube;\n"]}