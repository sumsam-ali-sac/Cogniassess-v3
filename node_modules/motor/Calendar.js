/*
 * LICENSE
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _famousCoreTransform = require('famous/core/Transform');

var _famousCoreTransform2 = _interopRequireDefault(_famousCoreTransform);

var _famousTransitionsTransitionable = require('famous/transitions/Transitionable');

var _famousTransitionsTransitionable2 = _interopRequireDefault(_famousTransitionsTransitionable);

var _famousTransitionsEasing = require('famous/transitions/Easing');

var _famousTransitionsEasing2 = _interopRequireDefault(_famousTransitionsEasing);

var _Molecule2 = require('./Molecule');

var _Molecule3 = _interopRequireDefault(_Molecule2);

var _Grid = require('./Grid');

var _Grid2 = _interopRequireDefault(_Grid);

var _DoubleSidedPlane = require('./DoubleSidedPlane');

var _DoubleSidedPlane2 = _interopRequireDefault(_DoubleSidedPlane);

var _armyKnifeForLength = require('army-knife/forLength');

var _armyKnifeForLength2 = _interopRequireDefault(_armyKnifeForLength);

/**
 * A calendar widget for selecting a date (WIP).
 *
 * @class Calendar
 * @extends Molecule
 */

var Calendar = (function (_Molecule) {
    _inherits(Calendar, _Molecule);

    /**
     * Create a new `Calendar` with the given Famo.us-style size array and
     * transition. The transition is the type of animation used when switching
     * between months.
     *
     * @constructor
     * @param {Array} calendarSize A Famo.us-style width/height size array.
     * @param {String} transition The name of the animation transition to use when switching months.
     */

    function Calendar(calendarSize, transition) {
        _classCallCheck(this, Calendar);

        _get(Object.getPrototypeOf(Calendar.prototype), 'constructor', this).call(this, { size: calendarSize });

        this.transition = transition;
        this.flipSide = 0; // 0 means the initial front faces are showing, 1 means the initial back faces are showing.
        this.columnsRows = [7, 6];
        this.planes = [];

        this._initializeTransitions();
        this._createGrid();

        setTimeout((function () {
            this.transitions[this.transition]();
            setInterval(this.transitions[this.transition], 2000);
        }).bind(this), 800);
    }

    /**
     * Creates the grid used for the layout of the day cells.
     *
     * @private
     */

    _createClass(Calendar, [{
        key: '_createGrid',
        value: function _createGrid() {
            var grid = new _Grid2['default'](this.columnsRows[0], this.columnsRows[1], this.options.size);

            (0, _armyKnifeForLength2['default'])(this.columnsRows[0] * this.columnsRows[1], (function (i) {
                var plane = new _DoubleSidedPlane2['default']({
                    properties: {
                        background: 'teal'
                    }
                });
                this.planes.push(plane);
            }).bind(this));

            grid.setChildren(this.planes);
            this.add(grid);
        }

        /**
         * Set up `this.transitions`, containing the available month-to-month
         * transitions.
         *
         * @private
         */
    }, {
        key: '_initializeTransitions',
        value: function _initializeTransitions() {
            this.transitions = {
                flipDiagonal: (function () {
                    this.flipSide = +!this.flipSide;
                    // determine which dimension of the grid is shorter and which is longer.
                    var shortest = 0;
                    var longest;
                    this.columnsRows.forEach((function (item, index) {
                        if (item < this.columnsRows[shortest]) shortest = index;
                    }).bind(this));
                    longest = +!shortest;

                    // for each diagonal of the grid, flip those cells.
                    (0, _armyKnifeForLength2['default'])(this.columnsRows[0] + this.columnsRows[1] - 1, (function (column) {
                        (0, _armyKnifeForLength2['default'])(this.columnsRows[shortest], (function (row) {
                            if (column - row >= 0 && column - row < this.columnsRows[longest]) {
                                var plane = this.planes[column - row + this.columnsRows[longest] * row];
                                flipOne(plane, column);
                            }
                        }).bind(this));
                    }).bind(this));

                    function flipOne(item, column) {
                        if (typeof item.__targetRotation == 'undefined') {
                            item.__targetRotation = new _famousTransitionsTransitionable2['default'](0);
                        }
                        var rotation = new _famousTransitionsTransitionable2['default'](item.__targetRotation.get());
                        item.__targetRotation.set(item.__targetRotation.get() + Math.PI);

                        //item.get().transformFrom(function() {
                        //return Transform.rotateY(rotation.get());
                        //});
                        item.children[0].get().transformFrom(function () {
                            return _famousCoreTransform2['default'].rotateY(rotation.get());
                        });
                        item.children[1].get().transformFrom(function () {
                            return _famousCoreTransform2['default'].rotateY(rotation.get() + Math.PI);
                        });

                        setTimeout(function () {
                            rotation.set(item.__targetRotation.get(), { duration: 2000, curve: _famousTransitionsEasing2['default'].outExpo });
                        }, 0 + 50 * column);
                    }
                }).bind(this)
            };
        }
    }]);

    return Calendar;
})(_Molecule3['default']);

exports.Calendar = Calendar;
exports['default'] = Calendar;
//# sourceMappingURL=Calendar.js.map